/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _localforage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localforage */ \"./src/js/localforage.js\");\n/* harmony import */ var _localforage__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_localforage__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _timenote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timenote */ \"./src/js/timenote.js\");\n\r\n\r\n\r\nconst bottomBar = document.getElementById(\"bottomBar\");\r\nconst input = document.getElementById(\"timeEditor\");\r\nconst height = window.visualViewport.height;\r\nconst viewport = window.visualViewport;\r\n\r\nwindow.addEventListener(\"scroll\", () => input.blur());\r\nwindow.visualViewport.addEventListener(\"resize\", resizeHandler);\r\n\r\nfunction resizeHandler() {\r\n    if (!/iPhone|iPad|iPod/.test(window.navigator.userAgent)) {\r\n      height = viewport.height;\r\n    }\r\n    bottomBar.style.bottom = `${height - viewport.height}px`;\r\n  }\r\n\r\n\r\n\r\nvar timenote = null;\r\nvar playTime = null;\r\nvar pauseTime = null;\r\n\r\n_localforage__WEBPACK_IMPORTED_MODULE_0___default().setDriver([\r\n    (_localforage__WEBPACK_IMPORTED_MODULE_0___default().INDEXEDDB),\r\n    (_localforage__WEBPACK_IMPORTED_MODULE_0___default().WEBSQL),\r\n    (_localforage__WEBPACK_IMPORTED_MODULE_0___default().LOCALSTORAGE)\r\n    ]).then(()=>{\r\n  \r\n  document.querySelector(\"i.play\").addEventListener(\"click\", ()=>{\r\n      clearInterval(pauseTime);\r\n      pauseTime = null;\r\n      if (!timenote) {\r\n        timenote = new _timenote__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n      }\r\n      timenote.pauseEnd();\r\n      timenote.isPaused = false;\r\n        playTime = setInterval(() => {\r\n          if (!timenote.isPaused) {\r\n          document.querySelector(\"#temps\").innerHTML = timenote.calcTemps()\r\n          }\r\n          _localforage__WEBPACK_IMPORTED_MODULE_0___default().setItem(\"timeBeginning\", timenote.timeStartedAt)\r\n          _localforage__WEBPACK_IMPORTED_MODULE_0___default().setItem(\"pauseBeginning\", timenote.pauseStartedAt)\r\n          _localforage__WEBPACK_IMPORTED_MODULE_0___default().setItem(\"text\", document.querySelector(\"#timeEditor\").value)\r\n          _localforage__WEBPACK_IMPORTED_MODULE_0___default().setItem(\"isPaused\", timenote.isPaused )\r\n        }, 1000);\r\n      document.querySelector(\".play\").classList.add(\"hidden\")\r\n      document.querySelector(\".pause\").classList.remove(\"hidden\");\r\n    });\r\n    document.querySelector(\"i.pause\").addEventListener(\"click\",()=> {\r\n      document.querySelector(\".pause\").classList.add(\"hidden\")\r\n      document.querySelector(\".play\").classList.remove(\"hidden\");\r\n      timenote.pauseBegin();\r\n      timenote.isPaused = true;\r\n    });\r\n    document.querySelector(\".note\").addEventListener(\"click\",() => {\r\n      timenote.addTimeToBottomOfText();\r\n    \r\n    });\r\n    document.querySelector(\"i.save\").addEventListener(\"click\",async () => {\r\n      let fileHandle;\r\n  \r\n    // Destructure the one-element array.\r\n    fileHandle = await window.showSaveFilePicker({\r\n      types: [\r\n        {\r\n          description: 'Text Files',\r\n          accept: {\r\n            'text/plain': ['.txt'],\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    // Do something with the file handle.\r\n  \r\n  const contents =  timenote.getTextFromTextArea()\r\n  \r\n  \r\n  \r\n  const writable = await fileHandle.createWritable();\r\n    // Write the contents of the file to the stream.\r\n    await writable.write(contents);\r\n    // Close the file and write the contents to disk.\r\n    await writable.close();    \r\n        \r\n      })\r\n  \r\n    document.querySelector(\"i.share\").addEventListener(\"click\", async () => {\r\n      const shareData  = {\r\n        title : new Date().toDateString(),\r\n        text : document.querySelector(\"#timeEditor\").value\r\n      }\r\n  \r\n      await navigator.share(shareData)\r\n    })\r\n  \r\n  function simulateClickPlay () {\r\n    var clickEvent = new MouseEvent(\"click\", { shiftKey: true });\r\n    document.querySelector(\"i.play\").dispatchEvent(clickEvent)\r\n    document.querySelector(\"#timeAdjust\").classList.add(\"hidden\")\r\n    \r\n  }\r\n      \r\n    document.querySelector(\"i.updateTime\").addEventListener(\"click\",() => {\r\n        document.querySelector(\"#timeAdjust\").classList.toggle(\"hidden\")\r\n      if (timenote){\r\n        var clickEvent = new MouseEvent(\"click\", { shiftKey: true });\r\n        document.querySelector(\"i.play\").dispatchEvent(clickEvent)\r\n      }\r\n      if (!timenote) {\r\n        timenote = new _timenote__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n      }\r\n    });\r\n    document.querySelector(\"i.approveRelative \").addEventListener(\"click\",() => {\r\n      timenote.adjustTime();\r\n      simulateClickPlay()\r\n    });\r\n\r\n    document.querySelector(\"i.approveAbsolute\").addEventListener(\"click\", ()=>{\r\n      let hour = document.querySelector(\".absoluteTimeZone .hour input\").value\r\n      let  minutes = document.querySelector(\".absoluteTimeZone .minute input\").value\r\n      let seconds = document.querySelector(\".absoluteTimeZone .minute input\").value \r\n      timenote.adjustTimeFromHour(hour, minutes, seconds)\r\n      simulateClickPlay()\r\n\r\n\r\n    })\r\n  \r\n  \r\n  \r\n    document.querySelector(\"div #hamburger\").addEventListener(\"click\", () => {\r\n      document.querySelector(\".showContextMenu\").classList.toggle(\"hidden\")\r\n    })\r\n  \r\n  document.querySelector(\"i.dark\").addEventListener(\"click\", ()=>{\r\n    document.querySelector(\"body\").classList.add(\"dark\");\r\n    document.querySelector(\"body\").classList.remove(\"light\");\r\n  })\r\n  \r\n  document.querySelector(\"i.light\").addEventListener(\"click\", ()=>{\r\n    document.querySelector(\"body\").classList.add(\"light\");\r\n    document.querySelector(\"body\").classList.remove(\"dark\");\r\n  })\r\n\r\n  document.querySelector('span.select_all').addEventListener('click', ()=>{\r\n    let keyBoard = document.querySelector(\"#timeEditor\")\r\n    console.log(\"click\")\r\n    setTimeout(function() {\r\n      keyBoard.select();\r\n    }, 100); \r\n    keyBoard.focus()\r\n  })\r\n\r\n  document.querySelector(\".keyboard_tab\").addEventListener(\"click\", ()=>{\r\n    let keyBoard = document.querySelector(\"#timeEditor\")\r\n    let editorText = keyBoard.value\r\n    let tabbedText = [editorText.slice(0,keyBoard.selectionStart), \"    \", editorText.slice(keyBoard.selectionStart,editorText.length - 1)].join('')\r\n    console.log(tabbedText)\r\n    keyBoard.value = tabbedText\r\n  })\r\n\r\ndocument.querySelector('.hide_keyboard').addEventListener('click', ()=>{\r\n  let keyBoard = document.querySelector(\"#timeEditor\")\r\n  keyBoard.blur()\r\n})\r\n\r\n  \r\n  window.addEventListener(\"load\",async ()=>{\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      // dark mode\r\n  \r\n      document.querySelector(\"body\").classList.add(\"dark\");\r\n  \r\n  }\r\n  \r\n  if( /Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(navigator.userAgent) ) {\r\n    // some code..\r\n    document.querySelector(\"i.save\").classList.add(\"hidden\")\r\n    document.querySelector(\"i.share\").classList.remove(\"hidden\");\r\n   }\r\n\r\n   let timeBeginning = await _localforage__WEBPACK_IMPORTED_MODULE_0___default().getItem(\"timeBeginning\")\r\n\r\n  if (timeBeginning.value === 0 || timeBeginning.value === null) {\r\n    return\r\n   }\r\n  \r\n  if (!timenote) {\r\n    timenote = new _timenote__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n  }\r\n  \r\n  _localforage__WEBPACK_IMPORTED_MODULE_0___default().getItem(\"isPaused\",(err,value) => {\r\n    timenote.isPaused = value;\r\n    console.log(\"en pause\", value)\r\n  \r\n  _localforage__WEBPACK_IMPORTED_MODULE_0___default().getItem(\"timeBeginning\", (err,value) =>{\r\n    timenote.timeStartedAt = parseInt(value) || new Date().getTime()\r\n    console.log(\"VALEUER\"+ value)\r\n    console.log(err)\r\n  })\r\n  \r\n  if (value) {\r\n    _localforage__WEBPACK_IMPORTED_MODULE_0___default().getItem(\"pauseBeginning\", (err,value) =>{\r\n      timenote.pauseStartedAt = parseInt(value) || new Date().getTime()\r\n    })\r\n      }\r\n      else {\r\n        if (timenote.pauseStartedAt == 0){\r\n          simulateClickPlay()\r\n        }\r\n      }\r\n  })\r\n  \r\n  \r\n  _localforage__WEBPACK_IMPORTED_MODULE_0___default().getItem(\"text\", (err,val)=>{\r\n    document.querySelector(\"#timeEditor\").value = val \r\n    timenote.text = val;\r\n    console.log(\"success\")\r\n    console.log(val)\r\n    console.log(err)\r\n  })\r\n  \r\n  })\r\n})\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ }),

/***/ "./src/js/localforage.js":
/*!*******************************!*\
  !*** ./src/js/localforage.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\r\n    localForage -- Offline Storage, Improved\r\n    Version 1.10.0\r\n    https://localforage.github.io/localForage\r\n    (c) 2013-2017 Mozilla, Apache License 2.0\r\n*/\r\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=undefined;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=undefined;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\r\n(function (global){\r\n'use strict';\r\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\r\n\r\nvar scheduleDrain;\r\n\r\n{\r\n  if (Mutation) {\r\n    var called = 0;\r\n    var observer = new Mutation(nextTick);\r\n    var element = global.document.createTextNode('');\r\n    observer.observe(element, {\r\n      characterData: true\r\n    });\r\n    scheduleDrain = function () {\r\n      element.data = (called = ++called % 2);\r\n    };\r\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\r\n    var channel = new global.MessageChannel();\r\n    channel.port1.onmessage = nextTick;\r\n    scheduleDrain = function () {\r\n      channel.port2.postMessage(0);\r\n    };\r\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\r\n    scheduleDrain = function () {\r\n\r\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n      var scriptEl = global.document.createElement('script');\r\n      scriptEl.onreadystatechange = function () {\r\n        nextTick();\r\n\r\n        scriptEl.onreadystatechange = null;\r\n        scriptEl.parentNode.removeChild(scriptEl);\r\n        scriptEl = null;\r\n      };\r\n      global.document.documentElement.appendChild(scriptEl);\r\n    };\r\n  } else {\r\n    scheduleDrain = function () {\r\n      setTimeout(nextTick, 0);\r\n    };\r\n  }\r\n}\r\n\r\nvar draining;\r\nvar queue = [];\r\n//named nextTick for less confusing stack traces\r\nfunction nextTick() {\r\n  draining = true;\r\n  var i, oldQueue;\r\n  var len = queue.length;\r\n  while (len) {\r\n    oldQueue = queue;\r\n    queue = [];\r\n    i = -1;\r\n    while (++i < len) {\r\n      oldQueue[i]();\r\n    }\r\n    len = queue.length;\r\n  }\r\n  draining = false;\r\n}\r\n\r\nmodule.exports = immediate;\r\nfunction immediate(task) {\r\n  if (queue.push(task) === 1 && !draining) {\r\n    scheduleDrain();\r\n  }\r\n}\r\n\r\n}).call(this,typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{}],2:[function(_dereq_,module,exports){\r\n'use strict';\r\nvar immediate = _dereq_(1);\r\n\r\n/* istanbul ignore next */\r\nfunction INTERNAL() {}\r\n\r\nvar handlers = {};\r\n\r\nvar REJECTED = ['REJECTED'];\r\nvar FULFILLED = ['FULFILLED'];\r\nvar PENDING = ['PENDING'];\r\n\r\nmodule.exports = Promise;\r\n\r\nfunction Promise(resolver) {\r\n  if (typeof resolver !== 'function') {\r\n    throw new TypeError('resolver must be a function');\r\n  }\r\n  this.state = PENDING;\r\n  this.queue = [];\r\n  this.outcome = void 0;\r\n  if (resolver !== INTERNAL) {\r\n    safelyResolveThenable(this, resolver);\r\n  }\r\n}\r\n\r\nPromise.prototype[\"catch\"] = function (onRejected) {\r\n  return this.then(null, onRejected);\r\n};\r\nPromise.prototype.then = function (onFulfilled, onRejected) {\r\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\r\n    typeof onRejected !== 'function' && this.state === REJECTED) {\r\n    return this;\r\n  }\r\n  var promise = new this.constructor(INTERNAL);\r\n  if (this.state !== PENDING) {\r\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\r\n    unwrap(promise, resolver, this.outcome);\r\n  } else {\r\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\r\n  }\r\n\r\n  return promise;\r\n};\r\nfunction QueueItem(promise, onFulfilled, onRejected) {\r\n  this.promise = promise;\r\n  if (typeof onFulfilled === 'function') {\r\n    this.onFulfilled = onFulfilled;\r\n    this.callFulfilled = this.otherCallFulfilled;\r\n  }\r\n  if (typeof onRejected === 'function') {\r\n    this.onRejected = onRejected;\r\n    this.callRejected = this.otherCallRejected;\r\n  }\r\n}\r\nQueueItem.prototype.callFulfilled = function (value) {\r\n  handlers.resolve(this.promise, value);\r\n};\r\nQueueItem.prototype.otherCallFulfilled = function (value) {\r\n  unwrap(this.promise, this.onFulfilled, value);\r\n};\r\nQueueItem.prototype.callRejected = function (value) {\r\n  handlers.reject(this.promise, value);\r\n};\r\nQueueItem.prototype.otherCallRejected = function (value) {\r\n  unwrap(this.promise, this.onRejected, value);\r\n};\r\n\r\nfunction unwrap(promise, func, value) {\r\n  immediate(function () {\r\n    var returnValue;\r\n    try {\r\n      returnValue = func(value);\r\n    } catch (e) {\r\n      return handlers.reject(promise, e);\r\n    }\r\n    if (returnValue === promise) {\r\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\r\n    } else {\r\n      handlers.resolve(promise, returnValue);\r\n    }\r\n  });\r\n}\r\n\r\nhandlers.resolve = function (self, value) {\r\n  var result = tryCatch(getThen, value);\r\n  if (result.status === 'error') {\r\n    return handlers.reject(self, result.value);\r\n  }\r\n  var thenable = result.value;\r\n\r\n  if (thenable) {\r\n    safelyResolveThenable(self, thenable);\r\n  } else {\r\n    self.state = FULFILLED;\r\n    self.outcome = value;\r\n    var i = -1;\r\n    var len = self.queue.length;\r\n    while (++i < len) {\r\n      self.queue[i].callFulfilled(value);\r\n    }\r\n  }\r\n  return self;\r\n};\r\nhandlers.reject = function (self, error) {\r\n  self.state = REJECTED;\r\n  self.outcome = error;\r\n  var i = -1;\r\n  var len = self.queue.length;\r\n  while (++i < len) {\r\n    self.queue[i].callRejected(error);\r\n  }\r\n  return self;\r\n};\r\n\r\nfunction getThen(obj) {\r\n  // Make sure we only access the accessor once as required by the spec\r\n  var then = obj && obj.then;\r\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\r\n    return function appyThen() {\r\n      then.apply(obj, arguments);\r\n    };\r\n  }\r\n}\r\n\r\nfunction safelyResolveThenable(self, thenable) {\r\n  // Either fulfill, reject or reject with error\r\n  var called = false;\r\n  function onError(value) {\r\n    if (called) {\r\n      return;\r\n    }\r\n    called = true;\r\n    handlers.reject(self, value);\r\n  }\r\n\r\n  function onSuccess(value) {\r\n    if (called) {\r\n      return;\r\n    }\r\n    called = true;\r\n    handlers.resolve(self, value);\r\n  }\r\n\r\n  function tryToUnwrap() {\r\n    thenable(onSuccess, onError);\r\n  }\r\n\r\n  var result = tryCatch(tryToUnwrap);\r\n  if (result.status === 'error') {\r\n    onError(result.value);\r\n  }\r\n}\r\n\r\nfunction tryCatch(func, value) {\r\n  var out = {};\r\n  try {\r\n    out.value = func(value);\r\n    out.status = 'success';\r\n  } catch (e) {\r\n    out.status = 'error';\r\n    out.value = e;\r\n  }\r\n  return out;\r\n}\r\n\r\nPromise.resolve = resolve;\r\nfunction resolve(value) {\r\n  if (value instanceof this) {\r\n    return value;\r\n  }\r\n  return handlers.resolve(new this(INTERNAL), value);\r\n}\r\n\r\nPromise.reject = reject;\r\nfunction reject(reason) {\r\n  var promise = new this(INTERNAL);\r\n  return handlers.reject(promise, reason);\r\n}\r\n\r\nPromise.all = all;\r\nfunction all(iterable) {\r\n  var self = this;\r\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\r\n    return this.reject(new TypeError('must be an array'));\r\n  }\r\n\r\n  var len = iterable.length;\r\n  var called = false;\r\n  if (!len) {\r\n    return this.resolve([]);\r\n  }\r\n\r\n  var values = new Array(len);\r\n  var resolved = 0;\r\n  var i = -1;\r\n  var promise = new this(INTERNAL);\r\n\r\n  while (++i < len) {\r\n    allResolver(iterable[i], i);\r\n  }\r\n  return promise;\r\n  function allResolver(value, i) {\r\n    self.resolve(value).then(resolveFromAll, function (error) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.reject(promise, error);\r\n      }\r\n    });\r\n    function resolveFromAll(outValue) {\r\n      values[i] = outValue;\r\n      if (++resolved === len && !called) {\r\n        called = true;\r\n        handlers.resolve(promise, values);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPromise.race = race;\r\nfunction race(iterable) {\r\n  var self = this;\r\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\r\n    return this.reject(new TypeError('must be an array'));\r\n  }\r\n\r\n  var len = iterable.length;\r\n  var called = false;\r\n  if (!len) {\r\n    return this.resolve([]);\r\n  }\r\n\r\n  var i = -1;\r\n  var promise = new this(INTERNAL);\r\n\r\n  while (++i < len) {\r\n    resolver(iterable[i]);\r\n  }\r\n  return promise;\r\n  function resolver(value) {\r\n    self.resolve(value).then(function (response) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.resolve(promise, response);\r\n      }\r\n    }, function (error) {\r\n      if (!called) {\r\n        called = true;\r\n        handlers.reject(promise, error);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n},{\"1\":1}],3:[function(_dereq_,module,exports){\r\n(function (global){\r\n'use strict';\r\nif (typeof global.Promise !== 'function') {\r\n  global.Promise = _dereq_(2);\r\n}\r\n\r\n}).call(this,typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n},{\"2\":2}],4:[function(_dereq_,module,exports){\r\n'use strict';\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction getIDB() {\r\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\r\n    try {\r\n        if (typeof indexedDB !== 'undefined') {\r\n            return indexedDB;\r\n        }\r\n        if (typeof webkitIndexedDB !== 'undefined') {\r\n            return webkitIndexedDB;\r\n        }\r\n        if (typeof mozIndexedDB !== 'undefined') {\r\n            return mozIndexedDB;\r\n        }\r\n        if (typeof OIndexedDB !== 'undefined') {\r\n            return OIndexedDB;\r\n        }\r\n        if (typeof msIndexedDB !== 'undefined') {\r\n            return msIndexedDB;\r\n        }\r\n    } catch (e) {\r\n        return;\r\n    }\r\n}\r\n\r\nvar idb = getIDB();\r\n\r\nfunction isIndexedDBValid() {\r\n    try {\r\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\r\n        // if needed.\r\n        if (!idb || !idb.open) {\r\n            return false;\r\n        }\r\n        // We mimic PouchDB here;\r\n        //\r\n        // We test for openDatabase because IE Mobile identifies itself\r\n        // as Safari. Oh the lulz...\r\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\r\n\r\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\r\n\r\n        // Safari <10.1 does not meet our requirements for IDB support\r\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\r\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\r\n        // Note: this creates issues with `window.fetch` polyfills and\r\n        // overrides; see:\r\n        // https://github.com/localForage/localForage/issues/856\r\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\r\n        // some outdated implementations of IDB that appear on Samsung\r\n        // and HTC Android devices <4.4 are missing IDBKeyRange\r\n        // See: https://github.com/mozilla/localForage/issues/128\r\n        // See: https://github.com/mozilla/localForage/issues/272\r\n        typeof IDBKeyRange !== 'undefined';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\nfunction createBlob(parts, properties) {\r\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\r\n    parts = parts || [];\r\n    properties = properties || {};\r\n    try {\r\n        return new Blob(parts, properties);\r\n    } catch (e) {\r\n        if (e.name !== 'TypeError') {\r\n            throw e;\r\n        }\r\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\r\n        var builder = new Builder();\r\n        for (var i = 0; i < parts.length; i += 1) {\r\n            builder.append(parts[i]);\r\n        }\r\n        return builder.getBlob(properties.type);\r\n    }\r\n}\r\n\r\n// This is CommonJS because lie is an external dependency, so Rollup\r\n// can just ignore it.\r\nif (typeof Promise === 'undefined') {\r\n    // In the \"nopromises\" build this will just throw if you don't have\r\n    // a global promise object, but it would throw anyway later.\r\n    _dereq_(3);\r\n}\r\nvar Promise$1 = Promise;\r\n\r\nfunction executeCallback(promise, callback) {\r\n    if (callback) {\r\n        promise.then(function (result) {\r\n            callback(null, result);\r\n        }, function (error) {\r\n            callback(error);\r\n        });\r\n    }\r\n}\r\n\r\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\r\n    if (typeof callback === 'function') {\r\n        promise.then(callback);\r\n    }\r\n\r\n    if (typeof errorCallback === 'function') {\r\n        promise[\"catch\"](errorCallback);\r\n    }\r\n}\r\n\r\nfunction normalizeKey(key) {\r\n    // Cast the key to a string, as that's all we can set as a key.\r\n    if (typeof key !== 'string') {\r\n        console.warn(key + ' used as a key, but it is not a string.');\r\n        key = String(key);\r\n    }\r\n\r\n    return key;\r\n}\r\n\r\nfunction getCallback() {\r\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\r\n        return arguments[arguments.length - 1];\r\n    }\r\n}\r\n\r\n// Some code originally from async_storage.js in\r\n// [Gaia](https://github.com/mozilla-b2g/gaia).\r\n\r\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\r\nvar supportsBlobs = void 0;\r\nvar dbContexts = {};\r\nvar toString = Object.prototype.toString;\r\n\r\n// Transaction Modes\r\nvar READ_ONLY = 'readonly';\r\nvar READ_WRITE = 'readwrite';\r\n\r\n// Transform a binary string to an array buffer, because otherwise\r\n// weird stuff happens when you try to work with the binary string directly.\r\n// It is known.\r\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\r\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\r\nfunction _binStringToArrayBuffer(bin) {\r\n    var length = bin.length;\r\n    var buf = new ArrayBuffer(length);\r\n    var arr = new Uint8Array(buf);\r\n    for (var i = 0; i < length; i++) {\r\n        arr[i] = bin.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n//\r\n// Blobs are not supported in all versions of IndexedDB, notably\r\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\r\n//\r\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\r\n// Detecting them is expensive and confusing to users, and Chrome 37-42\r\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\r\n//\r\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\r\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\r\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\r\n//\r\n// Code borrowed from PouchDB. See:\r\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\r\n//\r\nfunction _checkBlobSupportWithoutCaching(idb) {\r\n    return new Promise$1(function (resolve) {\r\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\r\n        var blob = createBlob(['']);\r\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\r\n\r\n        txn.onabort = function (e) {\r\n            // If the transaction aborts now its due to not being able to\r\n            // write to the database, likely due to the disk being full\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            resolve(false);\r\n        };\r\n\r\n        txn.oncomplete = function () {\r\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\r\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\r\n            // MS Edge pretends to be Chrome 42:\r\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\r\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\r\n        };\r\n    })[\"catch\"](function () {\r\n        return false; // error, so assume unsupported\r\n    });\r\n}\r\n\r\nfunction _checkBlobSupport(idb) {\r\n    if (typeof supportsBlobs === 'boolean') {\r\n        return Promise$1.resolve(supportsBlobs);\r\n    }\r\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\r\n        supportsBlobs = value;\r\n        return supportsBlobs;\r\n    });\r\n}\r\n\r\nfunction _deferReadiness(dbInfo) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Create a deferred object representing the current database operation.\r\n    var deferredOperation = {};\r\n\r\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\r\n        deferredOperation.resolve = resolve;\r\n        deferredOperation.reject = reject;\r\n    });\r\n\r\n    // Enqueue the deferred operation.\r\n    dbContext.deferredOperations.push(deferredOperation);\r\n\r\n    // Chain its promise to the database readiness.\r\n    if (!dbContext.dbReady) {\r\n        dbContext.dbReady = deferredOperation.promise;\r\n    } else {\r\n        dbContext.dbReady = dbContext.dbReady.then(function () {\r\n            return deferredOperation.promise;\r\n        });\r\n    }\r\n}\r\n\r\nfunction _advanceReadiness(dbInfo) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Dequeue a deferred operation.\r\n    var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n    // Resolve its promise (which is part of the database readiness\r\n    // chain of promises).\r\n    if (deferredOperation) {\r\n        deferredOperation.resolve();\r\n        return deferredOperation.promise;\r\n    }\r\n}\r\n\r\nfunction _rejectReadiness(dbInfo, err) {\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // Dequeue a deferred operation.\r\n    var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n    // Reject its promise (which is part of the database readiness\r\n    // chain of promises).\r\n    if (deferredOperation) {\r\n        deferredOperation.reject(err);\r\n        return deferredOperation.promise;\r\n    }\r\n}\r\n\r\nfunction _getConnection(dbInfo, upgradeNeeded) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\r\n\r\n        if (dbInfo.db) {\r\n            if (upgradeNeeded) {\r\n                _deferReadiness(dbInfo);\r\n                dbInfo.db.close();\r\n            } else {\r\n                return resolve(dbInfo.db);\r\n            }\r\n        }\r\n\r\n        var dbArgs = [dbInfo.name];\r\n\r\n        if (upgradeNeeded) {\r\n            dbArgs.push(dbInfo.version);\r\n        }\r\n\r\n        var openreq = idb.open.apply(idb, dbArgs);\r\n\r\n        if (upgradeNeeded) {\r\n            openreq.onupgradeneeded = function (e) {\r\n                var db = openreq.result;\r\n                try {\r\n                    db.createObjectStore(dbInfo.storeName);\r\n                    if (e.oldVersion <= 1) {\r\n                        // Added when support for blob shims was added\r\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\r\n                    }\r\n                } catch (ex) {\r\n                    if (ex.name === 'ConstraintError') {\r\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\r\n                    } else {\r\n                        throw ex;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        openreq.onerror = function (e) {\r\n            e.preventDefault();\r\n            reject(openreq.error);\r\n        };\r\n\r\n        openreq.onsuccess = function () {\r\n            var db = openreq.result;\r\n            db.onversionchange = function (e) {\r\n                // Triggered when the database is modified (e.g. adding an objectStore) or\r\n                // deleted (even when initiated by other sessions in different tabs).\r\n                // Closing the connection here prevents those operations from being blocked.\r\n                // If the database is accessed again later by this instance, the connection\r\n                // will be reopened or the database recreated as needed.\r\n                e.target.close();\r\n            };\r\n            resolve(db);\r\n            _advanceReadiness(dbInfo);\r\n        };\r\n    });\r\n}\r\n\r\nfunction _getOriginalConnection(dbInfo) {\r\n    return _getConnection(dbInfo, false);\r\n}\r\n\r\nfunction _getUpgradedConnection(dbInfo) {\r\n    return _getConnection(dbInfo, true);\r\n}\r\n\r\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\r\n    if (!dbInfo.db) {\r\n        return true;\r\n    }\r\n\r\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\r\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\r\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\r\n\r\n    if (isDowngrade) {\r\n        // If the version is not the default one\r\n        // then warn for impossible downgrade.\r\n        if (dbInfo.version !== defaultVersion) {\r\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\r\n        }\r\n        // Align the versions to prevent errors.\r\n        dbInfo.version = dbInfo.db.version;\r\n    }\r\n\r\n    if (isUpgrade || isNewStore) {\r\n        // If the store is new then increment the version (if needed).\r\n        // This will trigger an \"upgradeneeded\" event which is required\r\n        // for creating a store.\r\n        if (isNewStore) {\r\n            var incVersion = dbInfo.db.version + 1;\r\n            if (incVersion > dbInfo.version) {\r\n                dbInfo.version = incVersion;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// encode a blob for indexeddb engines that don't support blobs\r\nfunction _encodeBlob(blob) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        var reader = new FileReader();\r\n        reader.onerror = reject;\r\n        reader.onloadend = function (e) {\r\n            var base64 = btoa(e.target.result || '');\r\n            resolve({\r\n                __local_forage_encoded_blob: true,\r\n                data: base64,\r\n                type: blob.type\r\n            });\r\n        };\r\n        reader.readAsBinaryString(blob);\r\n    });\r\n}\r\n\r\n// decode an encoded blob\r\nfunction _decodeBlob(encodedBlob) {\r\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\r\n    return createBlob([arrayBuff], { type: encodedBlob.type });\r\n}\r\n\r\n// is this one of our fancy encoded blobs?\r\nfunction _isEncodedBlob(value) {\r\n    return value && value.__local_forage_encoded_blob;\r\n}\r\n\r\n// Specialize the default `ready()` function by making it dependent\r\n// on the current database operations. Thus, the driver will be actually\r\n// ready when it's been initialized (default) *and* there are no pending\r\n// operations on the database (initiated by some other instances).\r\nfunction _fullyReady(callback) {\r\n    var self = this;\r\n\r\n    var promise = self._initReady().then(function () {\r\n        var dbContext = dbContexts[self._dbInfo.name];\r\n\r\n        if (dbContext && dbContext.dbReady) {\r\n            return dbContext.dbReady;\r\n        }\r\n    });\r\n\r\n    executeTwoCallbacks(promise, callback, callback);\r\n    return promise;\r\n}\r\n\r\n// Try to establish a new db connection to replace the\r\n// current one which is broken (i.e. experiencing\r\n// InvalidStateError while creating a transaction).\r\nfunction _tryReconnect(dbInfo) {\r\n    _deferReadiness(dbInfo);\r\n\r\n    var dbContext = dbContexts[dbInfo.name];\r\n    var forages = dbContext.forages;\r\n\r\n    for (var i = 0; i < forages.length; i++) {\r\n        var forage = forages[i];\r\n        if (forage._dbInfo.db) {\r\n            forage._dbInfo.db.close();\r\n            forage._dbInfo.db = null;\r\n        }\r\n    }\r\n    dbInfo.db = null;\r\n\r\n    return _getOriginalConnection(dbInfo).then(function (db) {\r\n        dbInfo.db = db;\r\n        if (_isUpgradeNeeded(dbInfo)) {\r\n            // Reopen the database for upgrading.\r\n            return _getUpgradedConnection(dbInfo);\r\n        }\r\n        return db;\r\n    }).then(function (db) {\r\n        // store the latest db reference\r\n        // in case the db was upgraded\r\n        dbInfo.db = dbContext.db = db;\r\n        for (var i = 0; i < forages.length; i++) {\r\n            forages[i]._dbInfo.db = db;\r\n        }\r\n    })[\"catch\"](function (err) {\r\n        _rejectReadiness(dbInfo, err);\r\n        throw err;\r\n    });\r\n}\r\n\r\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\r\n// so we have to do it with callbacks\r\nfunction createTransaction(dbInfo, mode, callback, retries) {\r\n    if (retries === undefined) {\r\n        retries = 1;\r\n    }\r\n\r\n    try {\r\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\r\n        callback(null, tx);\r\n    } catch (err) {\r\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\r\n            return Promise$1.resolve().then(function () {\r\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\r\n                    // increase the db version, to create the new ObjectStore\r\n                    if (dbInfo.db) {\r\n                        dbInfo.version = dbInfo.db.version + 1;\r\n                    }\r\n                    // Reopen the database for upgrading.\r\n                    return _getUpgradedConnection(dbInfo);\r\n                }\r\n            }).then(function () {\r\n                return _tryReconnect(dbInfo).then(function () {\r\n                    createTransaction(dbInfo, mode, callback, retries - 1);\r\n                });\r\n            })[\"catch\"](callback);\r\n        }\r\n\r\n        callback(err);\r\n    }\r\n}\r\n\r\nfunction createDbContext() {\r\n    return {\r\n        // Running localForages sharing a database.\r\n        forages: [],\r\n        // Shared database.\r\n        db: null,\r\n        // Database readiness (promise).\r\n        dbReady: null,\r\n        // Deferred operations on the database.\r\n        deferredOperations: []\r\n    };\r\n}\r\n\r\n// Open the IndexedDB database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\nfunction _initStorage(options) {\r\n    var self = this;\r\n    var dbInfo = {\r\n        db: null\r\n    };\r\n\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = options[i];\r\n        }\r\n    }\r\n\r\n    // Get the current context of the database;\r\n    var dbContext = dbContexts[dbInfo.name];\r\n\r\n    // ...or create a new context.\r\n    if (!dbContext) {\r\n        dbContext = createDbContext();\r\n        // Register the new context in the global container.\r\n        dbContexts[dbInfo.name] = dbContext;\r\n    }\r\n\r\n    // Register itself as a running localForage in the current context.\r\n    dbContext.forages.push(self);\r\n\r\n    // Replace the default `ready()` function with the specialized one.\r\n    if (!self._initReady) {\r\n        self._initReady = self.ready;\r\n        self.ready = _fullyReady;\r\n    }\r\n\r\n    // Create an array of initialization states of the related localForages.\r\n    var initPromises = [];\r\n\r\n    function ignoreErrors() {\r\n        // Don't handle errors here,\r\n        // just makes sure related localForages aren't pending.\r\n        return Promise$1.resolve();\r\n    }\r\n\r\n    for (var j = 0; j < dbContext.forages.length; j++) {\r\n        var forage = dbContext.forages[j];\r\n        if (forage !== self) {\r\n            // Don't wait for itself...\r\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\r\n        }\r\n    }\r\n\r\n    // Take a snapshot of the related localForages.\r\n    var forages = dbContext.forages.slice(0);\r\n\r\n    // Initialize the connection process only when\r\n    // all the related localForages aren't pending.\r\n    return Promise$1.all(initPromises).then(function () {\r\n        dbInfo.db = dbContext.db;\r\n        // Get the connection or open a new one without upgrade.\r\n        return _getOriginalConnection(dbInfo);\r\n    }).then(function (db) {\r\n        dbInfo.db = db;\r\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\r\n            // Reopen the database for upgrading.\r\n            return _getUpgradedConnection(dbInfo);\r\n        }\r\n        return db;\r\n    }).then(function (db) {\r\n        dbInfo.db = dbContext.db = db;\r\n        self._dbInfo = dbInfo;\r\n        // Share the final connection amongst related localForages.\r\n        for (var k = 0; k < forages.length; k++) {\r\n            var forage = forages[k];\r\n            if (forage !== self) {\r\n                // Self is already up-to-date.\r\n                forage._dbInfo.db = dbInfo.db;\r\n                forage._dbInfo.version = dbInfo.version;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction getItem(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.get(key);\r\n\r\n                    req.onsuccess = function () {\r\n                        var value = req.result;\r\n                        if (value === undefined) {\r\n                            value = null;\r\n                        }\r\n                        if (_isEncodedBlob(value)) {\r\n                            value = _decodeBlob(value);\r\n                        }\r\n                        resolve(value);\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Iterate over all items stored in database.\r\nfunction iterate(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.openCursor();\r\n                    var iterationNumber = 1;\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            if (_isEncodedBlob(value)) {\r\n                                value = _decodeBlob(value);\r\n                            }\r\n                            var result = iterator(value, cursor.key, iterationNumber++);\r\n\r\n                            // when the iterator callback returns any\r\n                            // (non-`undefined`) value, then we stop\r\n                            // the iteration immediately\r\n                            if (result !== void 0) {\r\n                                resolve(result);\r\n                            } else {\r\n                                cursor[\"continue\"]();\r\n                            }\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n\r\n    return promise;\r\n}\r\n\r\nfunction setItem(key, value, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        var dbInfo;\r\n        self.ready().then(function () {\r\n            dbInfo = self._dbInfo;\r\n            if (toString.call(value) === '[object Blob]') {\r\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\r\n                    if (blobSupport) {\r\n                        return value;\r\n                    }\r\n                    return _encodeBlob(value);\r\n                });\r\n            }\r\n            return value;\r\n        }).then(function (value) {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n\r\n                    // The reason we don't _save_ null is because IE 10 does\r\n                    // not support saving the `null` type in IndexedDB. How\r\n                    // ironic, given the bug below!\r\n                    // See: https://github.com/mozilla/localForage/issues/161\r\n                    if (value === null) {\r\n                        value = undefined;\r\n                    }\r\n\r\n                    var req = store.put(value, key);\r\n\r\n                    transaction.oncomplete = function () {\r\n                        // Cast to undefined so the value passed to\r\n                        // callback/promise is the same as what one would get out\r\n                        // of `getItem()` later. This leads to some weirdness\r\n                        // (setItem('foo', undefined) will return `null`), but\r\n                        // it's not my fault localStorage is our baseline and that\r\n                        // it's weird.\r\n                        if (value === undefined) {\r\n                            value = null;\r\n                        }\r\n\r\n                        resolve(value);\r\n                    };\r\n                    transaction.onabort = transaction.onerror = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction removeItem(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    // We use a Grunt task to make this safe for IE and some\r\n                    // versions of Android (including those used by Cordova).\r\n                    // Normally IE won't like `.delete()` and will insist on\r\n                    // using `['delete']()`, but we have a build step that\r\n                    // fixes this for us now.\r\n                    var req = store[\"delete\"](key);\r\n                    transaction.oncomplete = function () {\r\n                        resolve();\r\n                    };\r\n\r\n                    transaction.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n\r\n                    // The request will be also be aborted if we've exceeded our storage\r\n                    // space.\r\n                    transaction.onabort = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction clear(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.clear();\r\n\r\n                    transaction.oncomplete = function () {\r\n                        resolve();\r\n                    };\r\n\r\n                    transaction.onabort = transaction.onerror = function () {\r\n                        var err = req.error ? req.error : req.transaction.error;\r\n                        reject(err);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction length(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.count();\r\n\r\n                    req.onsuccess = function () {\r\n                        resolve(req.result);\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction key(n, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        if (n < 0) {\r\n            resolve(null);\r\n\r\n            return;\r\n        }\r\n\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var advanced = false;\r\n                    var req = store.openKeyCursor();\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n                        if (!cursor) {\r\n                            // this means there weren't enough keys\r\n                            resolve(null);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        if (n === 0) {\r\n                            // We have the first key, return it if that's what they\r\n                            // wanted.\r\n                            resolve(cursor.key);\r\n                        } else {\r\n                            if (!advanced) {\r\n                                // Otherwise, ask the cursor to skip ahead n\r\n                                // records.\r\n                                advanced = true;\r\n                                cursor.advance(n);\r\n                            } else {\r\n                                // When we get here, we've got the nth key.\r\n                                resolve(cursor.key);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                try {\r\n                    var store = transaction.objectStore(self._dbInfo.storeName);\r\n                    var req = store.openKeyCursor();\r\n                    var keys = [];\r\n\r\n                    req.onsuccess = function () {\r\n                        var cursor = req.result;\r\n\r\n                        if (!cursor) {\r\n                            resolve(keys);\r\n                            return;\r\n                        }\r\n\r\n                        keys.push(cursor.key);\r\n                        cursor[\"continue\"]();\r\n                    };\r\n\r\n                    req.onerror = function () {\r\n                        reject(req.error);\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction dropInstance(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    var currentConfig = this.config();\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\r\n\r\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\r\n            var dbContext = dbContexts[options.name];\r\n            var forages = dbContext.forages;\r\n            dbContext.db = db;\r\n            for (var i = 0; i < forages.length; i++) {\r\n                forages[i]._dbInfo.db = db;\r\n            }\r\n            return db;\r\n        });\r\n\r\n        if (!options.storeName) {\r\n            promise = dbPromise.then(function (db) {\r\n                _deferReadiness(options);\r\n\r\n                var dbContext = dbContexts[options.name];\r\n                var forages = dbContext.forages;\r\n\r\n                db.close();\r\n                for (var i = 0; i < forages.length; i++) {\r\n                    var forage = forages[i];\r\n                    forage._dbInfo.db = null;\r\n                }\r\n\r\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\r\n                    var req = idb.deleteDatabase(options.name);\r\n\r\n                    req.onerror = function () {\r\n                        var db = req.result;\r\n                        if (db) {\r\n                            db.close();\r\n                        }\r\n                        reject(req.error);\r\n                    };\r\n\r\n                    req.onblocked = function () {\r\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\r\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\r\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\r\n                    };\r\n\r\n                    req.onsuccess = function () {\r\n                        var db = req.result;\r\n                        if (db) {\r\n                            db.close();\r\n                        }\r\n                        resolve(db);\r\n                    };\r\n                });\r\n\r\n                return dropDBPromise.then(function (db) {\r\n                    dbContext.db = db;\r\n                    for (var i = 0; i < forages.length; i++) {\r\n                        var _forage = forages[i];\r\n                        _advanceReadiness(_forage._dbInfo);\r\n                    }\r\n                })[\"catch\"](function (err) {\r\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                    throw err;\r\n                });\r\n            });\r\n        } else {\r\n            promise = dbPromise.then(function (db) {\r\n                if (!db.objectStoreNames.contains(options.storeName)) {\r\n                    return;\r\n                }\r\n\r\n                var newVersion = db.version + 1;\r\n\r\n                _deferReadiness(options);\r\n\r\n                var dbContext = dbContexts[options.name];\r\n                var forages = dbContext.forages;\r\n\r\n                db.close();\r\n                for (var i = 0; i < forages.length; i++) {\r\n                    var forage = forages[i];\r\n                    forage._dbInfo.db = null;\r\n                    forage._dbInfo.version = newVersion;\r\n                }\r\n\r\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\r\n                    var req = idb.open(options.name, newVersion);\r\n\r\n                    req.onerror = function (err) {\r\n                        var db = req.result;\r\n                        db.close();\r\n                        reject(err);\r\n                    };\r\n\r\n                    req.onupgradeneeded = function () {\r\n                        var db = req.result;\r\n                        db.deleteObjectStore(options.storeName);\r\n                    };\r\n\r\n                    req.onsuccess = function () {\r\n                        var db = req.result;\r\n                        db.close();\r\n                        resolve(db);\r\n                    };\r\n                });\r\n\r\n                return dropObjectPromise.then(function (db) {\r\n                    dbContext.db = db;\r\n                    for (var j = 0; j < forages.length; j++) {\r\n                        var _forage2 = forages[j];\r\n                        _forage2._dbInfo.db = db;\r\n                        _advanceReadiness(_forage2._dbInfo);\r\n                    }\r\n                })[\"catch\"](function (err) {\r\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                    throw err;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar asyncStorage = {\r\n    _driver: 'asyncStorage',\r\n    _initStorage: _initStorage,\r\n    _support: isIndexedDBValid(),\r\n    iterate: iterate,\r\n    getItem: getItem,\r\n    setItem: setItem,\r\n    removeItem: removeItem,\r\n    clear: clear,\r\n    length: length,\r\n    key: key,\r\n    keys: keys,\r\n    dropInstance: dropInstance\r\n};\r\n\r\nfunction isWebSQLValid() {\r\n    return typeof openDatabase === 'function';\r\n}\r\n\r\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\r\n// it to Base64, so this is how we store it to prevent very strange errors with less\r\n// verbose ways of binary <-> string data storage.\r\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\r\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\r\n\r\nvar SERIALIZED_MARKER = '__lfsc__:';\r\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\r\n\r\n// OMG the serializations!\r\nvar TYPE_ARRAYBUFFER = 'arbf';\r\nvar TYPE_BLOB = 'blob';\r\nvar TYPE_INT8ARRAY = 'si08';\r\nvar TYPE_UINT8ARRAY = 'ui08';\r\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\r\nvar TYPE_INT16ARRAY = 'si16';\r\nvar TYPE_INT32ARRAY = 'si32';\r\nvar TYPE_UINT16ARRAY = 'ur16';\r\nvar TYPE_UINT32ARRAY = 'ui32';\r\nvar TYPE_FLOAT32ARRAY = 'fl32';\r\nvar TYPE_FLOAT64ARRAY = 'fl64';\r\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\r\n\r\nvar toString$1 = Object.prototype.toString;\r\n\r\nfunction stringToBuffer(serializedString) {\r\n    // Fill the string into a ArrayBuffer.\r\n    var bufferLength = serializedString.length * 0.75;\r\n    var len = serializedString.length;\r\n    var i;\r\n    var p = 0;\r\n    var encoded1, encoded2, encoded3, encoded4;\r\n\r\n    if (serializedString[serializedString.length - 1] === '=') {\r\n        bufferLength--;\r\n        if (serializedString[serializedString.length - 2] === '=') {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    var buffer = new ArrayBuffer(bufferLength);\r\n    var bytes = new Uint8Array(buffer);\r\n\r\n    for (i = 0; i < len; i += 4) {\r\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\r\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\r\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\r\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\r\n\r\n        /*jslint bitwise: true */\r\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\r\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\r\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\r\n    }\r\n    return buffer;\r\n}\r\n\r\n// Converts a buffer to a string to store, serialized, in the backend\r\n// storage library.\r\nfunction bufferToString(buffer) {\r\n    // base64-arraybuffer\r\n    var bytes = new Uint8Array(buffer);\r\n    var base64String = '';\r\n    var i;\r\n\r\n    for (i = 0; i < bytes.length; i += 3) {\r\n        /*jslint bitwise: true */\r\n        base64String += BASE_CHARS[bytes[i] >> 2];\r\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\r\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\r\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if (bytes.length % 3 === 2) {\r\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\r\n    } else if (bytes.length % 3 === 1) {\r\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\r\n    }\r\n\r\n    return base64String;\r\n}\r\n\r\n// Serialize a value, afterwards executing a callback (which usually\r\n// instructs the `setItem()` callback/promise to be executed). This is how\r\n// we store binary data with localStorage.\r\nfunction serialize(value, callback) {\r\n    var valueType = '';\r\n    if (value) {\r\n        valueType = toString$1.call(value);\r\n    }\r\n\r\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\r\n    // checks fail when running the tests using casper.js...\r\n    //\r\n    // TODO: See why those tests fail and use a better solution.\r\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\r\n        // Convert binary arrays to a string and prefix the string with\r\n        // a special marker.\r\n        var buffer;\r\n        var marker = SERIALIZED_MARKER;\r\n\r\n        if (value instanceof ArrayBuffer) {\r\n            buffer = value;\r\n            marker += TYPE_ARRAYBUFFER;\r\n        } else {\r\n            buffer = value.buffer;\r\n\r\n            if (valueType === '[object Int8Array]') {\r\n                marker += TYPE_INT8ARRAY;\r\n            } else if (valueType === '[object Uint8Array]') {\r\n                marker += TYPE_UINT8ARRAY;\r\n            } else if (valueType === '[object Uint8ClampedArray]') {\r\n                marker += TYPE_UINT8CLAMPEDARRAY;\r\n            } else if (valueType === '[object Int16Array]') {\r\n                marker += TYPE_INT16ARRAY;\r\n            } else if (valueType === '[object Uint16Array]') {\r\n                marker += TYPE_UINT16ARRAY;\r\n            } else if (valueType === '[object Int32Array]') {\r\n                marker += TYPE_INT32ARRAY;\r\n            } else if (valueType === '[object Uint32Array]') {\r\n                marker += TYPE_UINT32ARRAY;\r\n            } else if (valueType === '[object Float32Array]') {\r\n                marker += TYPE_FLOAT32ARRAY;\r\n            } else if (valueType === '[object Float64Array]') {\r\n                marker += TYPE_FLOAT64ARRAY;\r\n            } else {\r\n                callback(new Error('Failed to get type for BinaryArray'));\r\n            }\r\n        }\r\n\r\n        callback(marker + bufferToString(buffer));\r\n    } else if (valueType === '[object Blob]') {\r\n        // Conver the blob to a binaryArray and then to a string.\r\n        var fileReader = new FileReader();\r\n\r\n        fileReader.onload = function () {\r\n            // Backwards-compatible prefix for the blob type.\r\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\r\n\r\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\r\n        };\r\n\r\n        fileReader.readAsArrayBuffer(value);\r\n    } else {\r\n        try {\r\n            callback(JSON.stringify(value));\r\n        } catch (e) {\r\n            console.error(\"Couldn't convert value into a JSON string: \", value);\r\n\r\n            callback(null, e);\r\n        }\r\n    }\r\n}\r\n\r\n// Deserialize data we've inserted into a value column/field. We place\r\n// special markers into our strings to mark them as encoded; this isn't\r\n// as nice as a meta field, but it's the only sane thing we can do whilst\r\n// keeping localStorage support intact.\r\n//\r\n// Oftentimes this will just deserialize JSON content, but if we have a\r\n// special marker (SERIALIZED_MARKER, defined above), we will extract\r\n// some kind of arraybuffer/binary data/typed array out of the string.\r\nfunction deserialize(value) {\r\n    // If we haven't marked this string as being specially serialized (i.e.\r\n    // something other than serialized JSON), we can just return it and be\r\n    // done with it.\r\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\r\n        return JSON.parse(value);\r\n    }\r\n\r\n    // The following code deals with deserializing some kind of Blob or\r\n    // TypedArray. First we separate out the type of data we're dealing\r\n    // with from the data itself.\r\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\r\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\r\n\r\n    var blobType;\r\n    // Backwards-compatible blob type serialization strategy.\r\n    // DBs created with older versions of localForage will simply not have the blob type.\r\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\r\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\r\n        blobType = matcher[1];\r\n        serializedString = serializedString.substring(matcher[0].length);\r\n    }\r\n    var buffer = stringToBuffer(serializedString);\r\n\r\n    // Return the right type based on the code/type set during\r\n    // serialization.\r\n    switch (type) {\r\n        case TYPE_ARRAYBUFFER:\r\n            return buffer;\r\n        case TYPE_BLOB:\r\n            return createBlob([buffer], { type: blobType });\r\n        case TYPE_INT8ARRAY:\r\n            return new Int8Array(buffer);\r\n        case TYPE_UINT8ARRAY:\r\n            return new Uint8Array(buffer);\r\n        case TYPE_UINT8CLAMPEDARRAY:\r\n            return new Uint8ClampedArray(buffer);\r\n        case TYPE_INT16ARRAY:\r\n            return new Int16Array(buffer);\r\n        case TYPE_UINT16ARRAY:\r\n            return new Uint16Array(buffer);\r\n        case TYPE_INT32ARRAY:\r\n            return new Int32Array(buffer);\r\n        case TYPE_UINT32ARRAY:\r\n            return new Uint32Array(buffer);\r\n        case TYPE_FLOAT32ARRAY:\r\n            return new Float32Array(buffer);\r\n        case TYPE_FLOAT64ARRAY:\r\n            return new Float64Array(buffer);\r\n        default:\r\n            throw new Error('Unkown type: ' + type);\r\n    }\r\n}\r\n\r\nvar localforageSerializer = {\r\n    serialize: serialize,\r\n    deserialize: deserialize,\r\n    stringToBuffer: stringToBuffer,\r\n    bufferToString: bufferToString\r\n};\r\n\r\n/*\r\n * Includes code from:\r\n *\r\n * base64-arraybuffer\r\n * https://github.com/niklasvh/base64-arraybuffer\r\n *\r\n * Copyright (c) 2012 Niklas von Hertzen\r\n * Licensed under the MIT license.\r\n */\r\n\r\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\r\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\r\n}\r\n\r\n// Open the WebSQL database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\nfunction _initStorage$1(options) {\r\n    var self = this;\r\n    var dbInfo = {\r\n        db: null\r\n    };\r\n\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\r\n        }\r\n    }\r\n\r\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\r\n        // Open the database; the openDatabase API will automatically\r\n        // create it for us if it doesn't exist.\r\n        try {\r\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\r\n        } catch (e) {\r\n            return reject(e);\r\n        }\r\n\r\n        // Create our key/value table if it doesn't exist.\r\n        dbInfo.db.transaction(function (t) {\r\n            createDbTable(t, dbInfo, function () {\r\n                self._dbInfo = dbInfo;\r\n                resolve();\r\n            }, function (t, error) {\r\n                reject(error);\r\n            });\r\n        }, reject);\r\n    });\r\n\r\n    dbInfo.serializer = localforageSerializer;\r\n    return dbInfoPromise;\r\n}\r\n\r\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\r\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\r\n        if (error.code === error.SYNTAX_ERR) {\r\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\r\n                if (!results.rows.length) {\r\n                    // if the table is missing (was deleted)\r\n                    // re-create it table and retry\r\n                    createDbTable(t, dbInfo, function () {\r\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\r\n                    }, errorCallback);\r\n                } else {\r\n                    errorCallback(t, error);\r\n                }\r\n            }, errorCallback);\r\n        } else {\r\n            errorCallback(t, error);\r\n        }\r\n    }, errorCallback);\r\n}\r\n\r\nfunction getItem$1(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\r\n                    var result = results.rows.length ? results.rows.item(0).value : null;\r\n\r\n                    // Check to see if this is serialized content we need to\r\n                    // unpack.\r\n                    if (result) {\r\n                        result = dbInfo.serializer.deserialize(result);\r\n                    }\r\n\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction iterate$1(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var rows = results.rows;\r\n                    var length = rows.length;\r\n\r\n                    for (var i = 0; i < length; i++) {\r\n                        var item = rows.item(i);\r\n                        var result = item.value;\r\n\r\n                        // Check to see if this is serialized content\r\n                        // we need to unpack.\r\n                        if (result) {\r\n                            result = dbInfo.serializer.deserialize(result);\r\n                        }\r\n\r\n                        result = iterator(result, item.key, i + 1);\r\n\r\n                        // void(0) prevents problems with redefinition\r\n                        // of `undefined`.\r\n                        if (result !== void 0) {\r\n                            resolve(result);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction _setItem(key, value, callback, retriesLeft) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            // The localStorage API doesn't return undefined values in an\r\n            // \"expected\" way, so undefined is always cast to null in all\r\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\r\n            if (value === undefined) {\r\n                value = null;\r\n            }\r\n\r\n            // Save the original value to pass to the callback.\r\n            var originalValue = value;\r\n\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.serializer.serialize(value, function (value, error) {\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    dbInfo.db.transaction(function (t) {\r\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\r\n                            resolve(originalValue);\r\n                        }, function (t, error) {\r\n                            reject(error);\r\n                        });\r\n                    }, function (sqlError) {\r\n                        // The transaction failed; check\r\n                        // to see if it's a quota error.\r\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\r\n                            // We reject the callback outright for now, but\r\n                            // it's worth trying to re-run the transaction.\r\n                            // Even if the user accepts the prompt to use\r\n                            // more storage on Safari, this error will\r\n                            // be called.\r\n                            //\r\n                            // Try to re-run the transaction.\r\n                            if (retriesLeft > 0) {\r\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\r\n                                return;\r\n                            }\r\n                            reject(sqlError);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction setItem$1(key, value, callback) {\r\n    return _setItem.apply(this, [key, value, callback, 1]);\r\n}\r\n\r\nfunction removeItem$1(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Deletes every item in the table.\r\n// TODO: Find out if this resets the AUTO_INCREMENT number.\r\nfunction clear$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Does a simple `COUNT(key)` to get the number of items stored in\r\n// localForage.\r\nfunction length$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                // Ahhh, SQL makes this one soooooo easy.\r\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var result = results.rows.item(0).c;\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Return the key located at key index X; essentially gets the key from a\r\n// `WHERE id = ?`. This is the most efficient way I can think to implement\r\n// this rarely-used (in my experience) part of the API, but it can seem\r\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\r\n// the ID of each key will change every time it's updated. Perhaps a stored\r\n// procedure for the `setItem()` SQL would solve this problem?\r\n// TODO: Don't change ID on `setItem()`.\r\nfunction key$1(n, callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\r\n                    var result = results.rows.length ? results.rows.item(0).key : null;\r\n                    resolve(result);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys$1(callback) {\r\n    var self = this;\r\n\r\n    var promise = new Promise$1(function (resolve, reject) {\r\n        self.ready().then(function () {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.db.transaction(function (t) {\r\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\r\n                    var keys = [];\r\n\r\n                    for (var i = 0; i < results.rows.length; i++) {\r\n                        keys.push(results.rows.item(i).key);\r\n                    }\r\n\r\n                    resolve(keys);\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        })[\"catch\"](reject);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// https://www.w3.org/TR/webdatabase/#databases\r\n// > There is no way to enumerate or delete the databases available for an origin from this API.\r\nfunction getAllStoreNames(db) {\r\n    return new Promise$1(function (resolve, reject) {\r\n        db.transaction(function (t) {\r\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\r\n                var storeNames = [];\r\n\r\n                for (var i = 0; i < results.rows.length; i++) {\r\n                    storeNames.push(results.rows.item(i).name);\r\n                }\r\n\r\n                resolve({\r\n                    db: db,\r\n                    storeNames: storeNames\r\n                });\r\n            }, function (t, error) {\r\n                reject(error);\r\n            });\r\n        }, function (sqlError) {\r\n            reject(sqlError);\r\n        });\r\n    });\r\n}\r\n\r\nfunction dropInstance$1(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    var currentConfig = this.config();\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        promise = new Promise$1(function (resolve) {\r\n            var db;\r\n            if (options.name === currentConfig.name) {\r\n                // use the db reference of the current instance\r\n                db = self._dbInfo.db;\r\n            } else {\r\n                db = openDatabase(options.name, '', '', 0);\r\n            }\r\n\r\n            if (!options.storeName) {\r\n                // drop all database tables\r\n                resolve(getAllStoreNames(db));\r\n            } else {\r\n                resolve({\r\n                    db: db,\r\n                    storeNames: [options.storeName]\r\n                });\r\n            }\r\n        }).then(function (operationInfo) {\r\n            return new Promise$1(function (resolve, reject) {\r\n                operationInfo.db.transaction(function (t) {\r\n                    function dropTable(storeName) {\r\n                        return new Promise$1(function (resolve, reject) {\r\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\r\n                                resolve();\r\n                            }, function (t, error) {\r\n                                reject(error);\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    var operations = [];\r\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\r\n                        operations.push(dropTable(operationInfo.storeNames[i]));\r\n                    }\r\n\r\n                    Promise$1.all(operations).then(function () {\r\n                        resolve();\r\n                    })[\"catch\"](function (e) {\r\n                        reject(e);\r\n                    });\r\n                }, function (sqlError) {\r\n                    reject(sqlError);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar webSQLStorage = {\r\n    _driver: 'webSQLStorage',\r\n    _initStorage: _initStorage$1,\r\n    _support: isWebSQLValid(),\r\n    iterate: iterate$1,\r\n    getItem: getItem$1,\r\n    setItem: setItem$1,\r\n    removeItem: removeItem$1,\r\n    clear: clear$1,\r\n    length: length$1,\r\n    key: key$1,\r\n    keys: keys$1,\r\n    dropInstance: dropInstance$1\r\n};\r\n\r\nfunction isLocalStorageValid() {\r\n    try {\r\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\r\n        // in IE8 typeof localStorage.setItem === 'object'\r\n        !!localStorage.setItem;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction _getKeyPrefix(options, defaultConfig) {\r\n    var keyPrefix = options.name + '/';\r\n\r\n    if (options.storeName !== defaultConfig.storeName) {\r\n        keyPrefix += options.storeName + '/';\r\n    }\r\n    return keyPrefix;\r\n}\r\n\r\n// Check if localStorage throws when saving an item\r\nfunction checkIfLocalStorageThrows() {\r\n    var localStorageTestKey = '_localforage_support_test';\r\n\r\n    try {\r\n        localStorage.setItem(localStorageTestKey, true);\r\n        localStorage.removeItem(localStorageTestKey);\r\n\r\n        return false;\r\n    } catch (e) {\r\n        return true;\r\n    }\r\n}\r\n\r\n// Check if localStorage is usable and allows to save an item\r\n// This method checks if localStorage is usable in Safari Private Browsing\r\n// mode, or in any other case where the available quota for localStorage\r\n// is 0 and there wasn't any saved items yet.\r\nfunction _isLocalStorageUsable() {\r\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\r\n}\r\n\r\n// Config the localStorage backend, using options set in the config.\r\nfunction _initStorage$2(options) {\r\n    var self = this;\r\n    var dbInfo = {};\r\n    if (options) {\r\n        for (var i in options) {\r\n            dbInfo[i] = options[i];\r\n        }\r\n    }\r\n\r\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\r\n\r\n    if (!_isLocalStorageUsable()) {\r\n        return Promise$1.reject();\r\n    }\r\n\r\n    self._dbInfo = dbInfo;\r\n    dbInfo.serializer = localforageSerializer;\r\n\r\n    return Promise$1.resolve();\r\n}\r\n\r\n// Remove all keys from the datastore, effectively destroying all data in\r\n// the app's key/value store!\r\nfunction clear$2(callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var keyPrefix = self._dbInfo.keyPrefix;\r\n\r\n        for (var i = localStorage.length - 1; i >= 0; i--) {\r\n            var key = localStorage.key(i);\r\n\r\n            if (key.indexOf(keyPrefix) === 0) {\r\n                localStorage.removeItem(key);\r\n            }\r\n        }\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Retrieve an item from the store. Unlike the original async_storage\r\n// library in Gaia, we don't modify return values at all. If a key's value\r\n// is `undefined`, we pass that value to the callback function.\r\nfunction getItem$2(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\r\n\r\n        // If a result was found, parse it from the serialized\r\n        // string into a JS object. If result isn't truthy, the key\r\n        // is likely undefined and we'll pass it straight to the\r\n        // callback.\r\n        if (result) {\r\n            result = dbInfo.serializer.deserialize(result);\r\n        }\r\n\r\n        return result;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Iterate over all items in the store.\r\nfunction iterate$2(iterator, callback) {\r\n    var self = this;\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var keyPrefix = dbInfo.keyPrefix;\r\n        var keyPrefixLength = keyPrefix.length;\r\n        var length = localStorage.length;\r\n\r\n        // We use a dedicated iterator instead of the `i` variable below\r\n        // so other keys we fetch in localStorage aren't counted in\r\n        // the `iterationNumber` argument passed to the `iterate()`\r\n        // callback.\r\n        //\r\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\r\n        var iterationNumber = 1;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var key = localStorage.key(i);\r\n            if (key.indexOf(keyPrefix) !== 0) {\r\n                continue;\r\n            }\r\n            var value = localStorage.getItem(key);\r\n\r\n            // If a result was found, parse it from the serialized\r\n            // string into a JS object. If result isn't truthy, the\r\n            // key is likely undefined and we'll pass it straight\r\n            // to the iterator.\r\n            if (value) {\r\n                value = dbInfo.serializer.deserialize(value);\r\n            }\r\n\r\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\r\n\r\n            if (value !== void 0) {\r\n                return value;\r\n            }\r\n        }\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Same as localStorage's key() method, except takes a callback.\r\nfunction key$2(n, callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var result;\r\n        try {\r\n            result = localStorage.key(n);\r\n        } catch (error) {\r\n            result = null;\r\n        }\r\n\r\n        // Remove the prefix from the key, if a key is found.\r\n        if (result) {\r\n            result = result.substring(dbInfo.keyPrefix.length);\r\n        }\r\n\r\n        return result;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction keys$2(callback) {\r\n    var self = this;\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        var length = localStorage.length;\r\n        var keys = [];\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var itemKey = localStorage.key(i);\r\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\r\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\r\n            }\r\n        }\r\n\r\n        return keys;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Supply the number of keys in the datastore to the callback function.\r\nfunction length$2(callback) {\r\n    var self = this;\r\n    var promise = self.keys().then(function (keys) {\r\n        return keys.length;\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Remove an item from the store, nice and simple.\r\nfunction removeItem$2(key, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        var dbInfo = self._dbInfo;\r\n        localStorage.removeItem(dbInfo.keyPrefix + key);\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\n// Set a key's value and run an optional callback once the value is set.\r\n// Unlike Gaia's implementation, the callback function is passed the value,\r\n// in case you want to operate on that value only after you're sure it\r\n// saved, or something like that.\r\nfunction setItem$2(key, value, callback) {\r\n    var self = this;\r\n\r\n    key = normalizeKey(key);\r\n\r\n    var promise = self.ready().then(function () {\r\n        // Convert undefined values to null.\r\n        // https://github.com/mozilla/localForage/pull/42\r\n        if (value === undefined) {\r\n            value = null;\r\n        }\r\n\r\n        // Save the original value to pass to the callback.\r\n        var originalValue = value;\r\n\r\n        return new Promise$1(function (resolve, reject) {\r\n            var dbInfo = self._dbInfo;\r\n            dbInfo.serializer.serialize(value, function (value, error) {\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    try {\r\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\r\n                        resolve(originalValue);\r\n                    } catch (e) {\r\n                        // localStorage capacity exceeded.\r\n                        // TODO: Make this a specific error/event.\r\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\r\n                            reject(e);\r\n                        }\r\n                        reject(e);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nfunction dropInstance$2(options, callback) {\r\n    callback = getCallback.apply(this, arguments);\r\n\r\n    options = typeof options !== 'function' && options || {};\r\n    if (!options.name) {\r\n        var currentConfig = this.config();\r\n        options.name = options.name || currentConfig.name;\r\n        options.storeName = options.storeName || currentConfig.storeName;\r\n    }\r\n\r\n    var self = this;\r\n    var promise;\r\n    if (!options.name) {\r\n        promise = Promise$1.reject('Invalid arguments');\r\n    } else {\r\n        promise = new Promise$1(function (resolve) {\r\n            if (!options.storeName) {\r\n                resolve(options.name + '/');\r\n            } else {\r\n                resolve(_getKeyPrefix(options, self._defaultConfig));\r\n            }\r\n        }).then(function (keyPrefix) {\r\n            for (var i = localStorage.length - 1; i >= 0; i--) {\r\n                var key = localStorage.key(i);\r\n\r\n                if (key.indexOf(keyPrefix) === 0) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    executeCallback(promise, callback);\r\n    return promise;\r\n}\r\n\r\nvar localStorageWrapper = {\r\n    _driver: 'localStorageWrapper',\r\n    _initStorage: _initStorage$2,\r\n    _support: isLocalStorageValid(),\r\n    iterate: iterate$2,\r\n    getItem: getItem$2,\r\n    setItem: setItem$2,\r\n    removeItem: removeItem$2,\r\n    clear: clear$2,\r\n    length: length$2,\r\n    key: key$2,\r\n    keys: keys$2,\r\n    dropInstance: dropInstance$2\r\n};\r\n\r\nvar sameValue = function sameValue(x, y) {\r\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\r\n};\r\n\r\nvar includes = function includes(array, searchElement) {\r\n    var len = array.length;\r\n    var i = 0;\r\n    while (i < len) {\r\n        if (sameValue(array[i], searchElement)) {\r\n            return true;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nvar isArray = Array.isArray || function (arg) {\r\n    return Object.prototype.toString.call(arg) === '[object Array]';\r\n};\r\n\r\n// Drivers are stored here when `defineDriver()` is called.\r\n// They are shared across all instances of localForage.\r\nvar DefinedDrivers = {};\r\n\r\nvar DriverSupport = {};\r\n\r\nvar DefaultDrivers = {\r\n    INDEXEDDB: asyncStorage,\r\n    WEBSQL: webSQLStorage,\r\n    LOCALSTORAGE: localStorageWrapper\r\n};\r\n\r\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\r\n\r\nvar OptionalDriverMethods = ['dropInstance'];\r\n\r\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\r\n\r\nvar DefaultConfig = {\r\n    description: '',\r\n    driver: DefaultDriverOrder.slice(),\r\n    name: 'localforage',\r\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\r\n    // we can use without a prompt.\r\n    size: 4980736,\r\n    storeName: 'keyvaluepairs',\r\n    version: 1.0\r\n};\r\n\r\nfunction callWhenReady(localForageInstance, libraryMethod) {\r\n    localForageInstance[libraryMethod] = function () {\r\n        var _args = arguments;\r\n        return localForageInstance.ready().then(function () {\r\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\r\n        });\r\n    };\r\n}\r\n\r\nfunction extend() {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var arg = arguments[i];\r\n\r\n        if (arg) {\r\n            for (var _key in arg) {\r\n                if (arg.hasOwnProperty(_key)) {\r\n                    if (isArray(arg[_key])) {\r\n                        arguments[0][_key] = arg[_key].slice();\r\n                    } else {\r\n                        arguments[0][_key] = arg[_key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return arguments[0];\r\n}\r\n\r\nvar LocalForage = function () {\r\n    function LocalForage(options) {\r\n        _classCallCheck(this, LocalForage);\r\n\r\n        for (var driverTypeKey in DefaultDrivers) {\r\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\r\n                var driver = DefaultDrivers[driverTypeKey];\r\n                var driverName = driver._driver;\r\n                this[driverTypeKey] = driverName;\r\n\r\n                if (!DefinedDrivers[driverName]) {\r\n                    // we don't need to wait for the promise,\r\n                    // since the default drivers can be defined\r\n                    // in a blocking manner\r\n                    this.defineDriver(driver);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._defaultConfig = extend({}, DefaultConfig);\r\n        this._config = extend({}, this._defaultConfig, options);\r\n        this._driverSet = null;\r\n        this._initDriver = null;\r\n        this._ready = false;\r\n        this._dbInfo = null;\r\n\r\n        this._wrapLibraryMethodsWithReady();\r\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\r\n    }\r\n\r\n    // Set any config values for localForage; can be called anytime before\r\n    // the first API call (e.g. `getItem`, `setItem`).\r\n    // We loop through options so we don't overwrite existing config\r\n    // values.\r\n\r\n\r\n    LocalForage.prototype.config = function config(options) {\r\n        // If the options argument is an object, we use it to set values.\r\n        // Otherwise, we return either a specified config value or all\r\n        // config values.\r\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\r\n            // If localforage is ready and fully initialized, we can't set\r\n            // any new configuration values. Instead, we return an error.\r\n            if (this._ready) {\r\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\r\n            }\r\n\r\n            for (var i in options) {\r\n                if (i === 'storeName') {\r\n                    options[i] = options[i].replace(/\\W/g, '_');\r\n                }\r\n\r\n                if (i === 'version' && typeof options[i] !== 'number') {\r\n                    return new Error('Database version must be a number.');\r\n                }\r\n\r\n                this._config[i] = options[i];\r\n            }\r\n\r\n            // after all config options are set and\r\n            // the driver option is used, try setting it\r\n            if ('driver' in options && options.driver) {\r\n                return this.setDriver(this._config.driver);\r\n            }\r\n\r\n            return true;\r\n        } else if (typeof options === 'string') {\r\n            return this._config[options];\r\n        } else {\r\n            return this._config;\r\n        }\r\n    };\r\n\r\n    // Used to define a custom driver, shared across all instances of\r\n    // localForage.\r\n\r\n\r\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\r\n        var promise = new Promise$1(function (resolve, reject) {\r\n            try {\r\n                var driverName = driverObject._driver;\r\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\r\n\r\n                // A driver name should be defined and not overlap with the\r\n                // library-defined, default drivers.\r\n                if (!driverObject._driver) {\r\n                    reject(complianceError);\r\n                    return;\r\n                }\r\n\r\n                var driverMethods = LibraryMethods.concat('_initStorage');\r\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\r\n                    var driverMethodName = driverMethods[i];\r\n\r\n                    // when the property is there,\r\n                    // it should be a method even when optional\r\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\r\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\r\n                        reject(complianceError);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                var configureMissingMethods = function configureMissingMethods() {\r\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\r\n                        return function () {\r\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\r\n                            var promise = Promise$1.reject(error);\r\n                            executeCallback(promise, arguments[arguments.length - 1]);\r\n                            return promise;\r\n                        };\r\n                    };\r\n\r\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\r\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\r\n                        if (!driverObject[optionalDriverMethod]) {\r\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                configureMissingMethods();\r\n\r\n                var setDriverSupport = function setDriverSupport(support) {\r\n                    if (DefinedDrivers[driverName]) {\r\n                        console.info('Redefining LocalForage driver: ' + driverName);\r\n                    }\r\n                    DefinedDrivers[driverName] = driverObject;\r\n                    DriverSupport[driverName] = support;\r\n                    // don't use a then, so that we can define\r\n                    // drivers that have simple _support methods\r\n                    // in a blocking manner\r\n                    resolve();\r\n                };\r\n\r\n                if ('_support' in driverObject) {\r\n                    if (driverObject._support && typeof driverObject._support === 'function') {\r\n                        driverObject._support().then(setDriverSupport, reject);\r\n                    } else {\r\n                        setDriverSupport(!!driverObject._support);\r\n                    }\r\n                } else {\r\n                    setDriverSupport(true);\r\n                }\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n\r\n        executeTwoCallbacks(promise, callback, errorCallback);\r\n        return promise;\r\n    };\r\n\r\n    LocalForage.prototype.driver = function driver() {\r\n        return this._driver || null;\r\n    };\r\n\r\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\r\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\r\n\r\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\r\n        return getDriverPromise;\r\n    };\r\n\r\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\r\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\r\n        executeTwoCallbacks(serializerPromise, callback);\r\n        return serializerPromise;\r\n    };\r\n\r\n    LocalForage.prototype.ready = function ready(callback) {\r\n        var self = this;\r\n\r\n        var promise = self._driverSet.then(function () {\r\n            if (self._ready === null) {\r\n                self._ready = self._initDriver();\r\n            }\r\n\r\n            return self._ready;\r\n        });\r\n\r\n        executeTwoCallbacks(promise, callback, callback);\r\n        return promise;\r\n    };\r\n\r\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\r\n        var self = this;\r\n\r\n        if (!isArray(drivers)) {\r\n            drivers = [drivers];\r\n        }\r\n\r\n        var supportedDrivers = this._getSupportedDrivers(drivers);\r\n\r\n        function setDriverToConfig() {\r\n            self._config.driver = self.driver();\r\n        }\r\n\r\n        function extendSelfWithDriver(driver) {\r\n            self._extend(driver);\r\n            setDriverToConfig();\r\n\r\n            self._ready = self._initStorage(self._config);\r\n            return self._ready;\r\n        }\r\n\r\n        function initDriver(supportedDrivers) {\r\n            return function () {\r\n                var currentDriverIndex = 0;\r\n\r\n                function driverPromiseLoop() {\r\n                    while (currentDriverIndex < supportedDrivers.length) {\r\n                        var driverName = supportedDrivers[currentDriverIndex];\r\n                        currentDriverIndex++;\r\n\r\n                        self._dbInfo = null;\r\n                        self._ready = null;\r\n\r\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\r\n                    }\r\n\r\n                    setDriverToConfig();\r\n                    var error = new Error('No available storage method found.');\r\n                    self._driverSet = Promise$1.reject(error);\r\n                    return self._driverSet;\r\n                }\r\n\r\n                return driverPromiseLoop();\r\n            };\r\n        }\r\n\r\n        // There might be a driver initialization in progress\r\n        // so wait for it to finish in order to avoid a possible\r\n        // race condition to set _dbInfo\r\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\r\n            return Promise$1.resolve();\r\n        }) : Promise$1.resolve();\r\n\r\n        this._driverSet = oldDriverSetDone.then(function () {\r\n            var driverName = supportedDrivers[0];\r\n            self._dbInfo = null;\r\n            self._ready = null;\r\n\r\n            return self.getDriver(driverName).then(function (driver) {\r\n                self._driver = driver._driver;\r\n                setDriverToConfig();\r\n                self._wrapLibraryMethodsWithReady();\r\n                self._initDriver = initDriver(supportedDrivers);\r\n            });\r\n        })[\"catch\"](function () {\r\n            setDriverToConfig();\r\n            var error = new Error('No available storage method found.');\r\n            self._driverSet = Promise$1.reject(error);\r\n            return self._driverSet;\r\n        });\r\n\r\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\r\n        return this._driverSet;\r\n    };\r\n\r\n    LocalForage.prototype.supports = function supports(driverName) {\r\n        return !!DriverSupport[driverName];\r\n    };\r\n\r\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\r\n        extend(this, libraryMethodsAndProperties);\r\n    };\r\n\r\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\r\n        var supportedDrivers = [];\r\n        for (var i = 0, len = drivers.length; i < len; i++) {\r\n            var driverName = drivers[i];\r\n            if (this.supports(driverName)) {\r\n                supportedDrivers.push(driverName);\r\n            }\r\n        }\r\n        return supportedDrivers;\r\n    };\r\n\r\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\r\n        // Add a stub for each driver API method that delays the call to the\r\n        // corresponding driver method until localForage is ready. These stubs\r\n        // will be replaced by the driver methods as soon as the driver is\r\n        // loaded, so there is no performance impact.\r\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\r\n            callWhenReady(this, LibraryMethods[i]);\r\n        }\r\n    };\r\n\r\n    LocalForage.prototype.createInstance = function createInstance(options) {\r\n        return new LocalForage(options);\r\n    };\r\n\r\n    return LocalForage;\r\n}();\r\n\r\n// The actual localForage object that we expose as a module or via a\r\n// global. It's extended by pulling in one of our other libraries.\r\n\r\n\r\nvar localforage_js = new LocalForage();\r\n\r\nmodule.exports = localforage_js;\r\n\r\n},{\"3\":3}]},{},[4])(4)\r\n});\r\n\n\n//# sourceURL=webpack:///./src/js/localforage.js?");

/***/ }),

/***/ "./src/js/timenote.js":
/*!****************************!*\
  !*** ./src/js/timenote.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar chron = null;\r\nvar playTime = null;\r\nvar pauseTime = null;\r\nclass timeNote {\r\n  constructor() {\r\n    this.timeStartedAt = new Date().getTime();\r\n    this.pauseStartedAt = 0;\r\n    this.pauseEndedAt = 0;\r\n    this.idNumber = 0;\r\n    this.isPaused = false;\r\n    this.text = \"\";\r\n  }\r\n  printInitializeTimer() {\r\n    console.log(this.timeStartedAt);\r\n  }\r\n\r\n  calcTemps() {\r\n    this.actualTime = new Date().getTime();\r\n    var timeDifference = (this.actualTime - this.timeStartedAt) / 1000;\r\n    this.seconds = timeDifference % 60;\r\n    this.minutes = (timeDifference / 60) % 60;\r\n    this.hours = timeDifference / 3600;\r\n\r\n    this.lastTime =\r\n      Math.floor(this.hours).toString() +\r\n      \":\" +\r\n      Math.floor(this.minutes).toString() +\r\n      \":\" +\r\n      Math.floor(this.seconds).toString();\r\n    return (\r\n      Math.floor(this.hours).toString() +\r\n      \":\" +\r\n      Math.floor(this.minutes).toString() +\r\n      \":\" +\r\n      Math.floor(this.seconds).toString()\r\n    );\r\n  }\r\n\r\n\r\n  pauseBegin() {\r\n    this.pauseStartedAt = new Date().getTime();\r\n    }\r\n  pauseEnd() {\r\n    if (this.isPaused) {\r\n      this.pauseEndedAt = new Date().getTime();\r\n      this.timeStartedAt += this.pauseEndedAt - this.pauseStartedAt;\r\n      this.pauseEndedAt = 0;\r\n      this.pauseStartedAt = 0;\r\n    }\r\n  }\r\n  getTextFromTextArea(){\r\n    this.text = document.querySelector(\"#timeEditor\").value\r\n    return this.text;\r\n  }\r\n\r\n  addTimeToBottomOfText() {\r\n    this.text = document.querySelector(\"#timeEditor\").value\r\n    this.text += \"\\n-\"+this.lastTime+\": \"\r\n    this.text = document.querySelector(\"#timeEditor\").value = this.text\r\n  }\r\n\r\n  zeroIfNull(n){\r\n    if (!n) {\r\n      return \"0\"\r\n    }\r\n    else {\r\n      return n\r\n    }\r\n\r\n  }\r\n\r\n  adjustTime() {\r\n    console.log(document.querySelector(\".hour input\").value)\r\n    this.timeStartedAt =\r\n      new Date().getTime() -\r\n      (parseInt(this.zeroIfNull(document.querySelector(\".relativeTimeZone .hour input\").value),10)* 3600 +\r\n        parseInt(this.zeroIfNull(document.querySelector(\".relativeTimeZone .minute input\").value),10) * 60 +\r\n        parseInt(this.zeroIfNull(document.querySelector(\".relativeTimeZone .second input\").value),10)) *\r\n        1000;\r\n  }\r\n\r\n  adjustTimeFromHour(hours,minutes, seconds) {\r\n    let now = new Date();\r\n    let hoursDifference = now.getHours() - this.zeroIfNull(hours);\r\n    let minutesDifference = now.getMinutes() - this.zeroIfNull(minutes);\r\n    let secondsDifference = now.getSeconds() - this.zeroIfNull(seconds);\r\n    let timeDifference = (parseInt(hoursDifference,10) * 3600 + parseInt(minutesDifference,10) * 60 + parseInt(secondsDifference,10)) * 1000\r\n    console.log(\"timeDifference\", timeDifference)\r\n    this.timeStartedAt = new Date().getTime() - timeDifference; \r\n  }\r\n}\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (timeNote);\n\n//# sourceURL=webpack:///./src/js/timenote.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ })()
;